//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "comics")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub title: String,
    pub description: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub author_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chapter_pages::Entity")]
    ChapterPages,
    #[sea_orm(has_many = "super::chapters::Entity")]
    Chapters,
    #[sea_orm(has_many = "super::comments::Entity")]
    Comments,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AuthorId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::chapter_pages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChapterPages.def()
    }
}

impl Related<super::chapters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chapters.def()
    }
}

impl Related<super::comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comments.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::comic_genres::Entity> for Entity {
    fn to() -> RelationDef {
        super::comics_genres_mapping::Relation::ComicGenres.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::comics_genres_mapping::Relation::Comics.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
